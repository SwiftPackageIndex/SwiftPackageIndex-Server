# Copyright Dave Verwer, Sven A. Schmidt, and other contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: '3.7'


x-shared: &shared
  environment:
    # set these variables via the environment or a `.env` file, which
    # docker-compose reads and uses to populate variables
    ALLOW_BUILD_TRIGGERS: ${ALLOW_BUILD_TRIGGERS}
    ALLOW_SOCIAL_POSTS: ${ALLOW_SOCIAL_POSTS}
    ANALYZE_LIMIT: ${ANALYZE_LIMIT}
    ANALYZE_SLEEP: ${ANALYZE_SLEEP}
    API_SIGNING_KEY: ${API_SIGNING_KEY}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_DOCS_BUCKET: ${AWS_DOCS_BUCKET}
    AWS_README_BUCKET: ${AWS_README_BUCKET}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    BUILD_TIMEOUT: ${BUILD_TIMEOUT}
    BUILD_TRIGGER_ALLOW_LIST: ${BUILD_TRIGGER_ALLOW_LIST}
    BUILD_TRIGGER_DOWNSCALING: ${BUILD_TRIGGER_DOWNSCALING}
    BUILD_TRIGGER_LATEST_SWIFT_VERSION_DOWNSCALING: ${BUILD_TRIGGER_LATEST_SWIFT_VERSION_DOWNSCALING}
    BUILD_TRIGGER_LIMIT: ${BUILD_TRIGGER_LIMIT}
    BUILD_TRIGGER_SLEEP: ${BUILD_TRIGGER_SLEEP}
    BUILDER_TOKEN: ${BUILDER_TOKEN}
    CHECKOUTS_DIR: ${CHECKOUTS_DIR}
    COLLECTION_SIGNING_PRIVATE_KEY: ${COLLECTION_SIGNING_PRIVATE_KEY}
    DATABASE_ID: ${DATABASE_ID}
    DATABASE_HOST: ${DATABASE_HOST}
    DATABASE_PORT: ${DATABASE_PORT}
    DATABASE_NAME: ${DATABASE_NAME}
    DATABASE_USERNAME: ${DATABASE_USERNAME}
    DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    DATABASE_USE_TLS: ${DATABASE_USE_TLS}
    ENABLE_CF_RAY_LOGGING: ${ENABLE_CF_RAY_LOGGING}
    FAILURE_MODE: ${FAILURE_MODE}
    GITHUB_TOKEN: ${GITHUB_TOKEN}
    GITLAB_API_TOKEN: ${GITLAB_API_TOKEN}
    GITLAB_PIPELINE_LIMIT: ${GITLAB_PIPELINE_LIMIT}
    GITLAB_PIPELINE_TOKEN: ${GITLAB_PIPELINE_TOKEN}
    HIDE_STAGING_BANNER: ${HIDE_STAGING_BANNER}
    MAINTENANCE_MESSAGE: ${MAINTENANCE_MESSAGE}
    LOG_LEVEL: ${LOG_LEVEL}
    MASTODON_ACCESS_TOKEN: ${MASTODON_ACCESS_TOKEN}
    METRICS_PUSHGATEWAY_URL: ${METRICS_PUSHGATEWAY_URL}
    PLAUSIBLE_BACKEND_REPORTING_SITE_ID: ${PLAUSIBLE_BACKEND_REPORTING_SITE_ID}
    PROCESSING_BUILD_BACKLOG: ${PROCESSING_BUILD_BACKLOG}
    RUNNER_IDS: ${RUNNER_IDS}
    SITE_URL: ${SITE_URL}
    SWIFT_BACKTRACE: ${SWIFT_BACKTRACE}
  volumes:
    - checkouts:/checkouts


services:

  server:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    ports:
      - '80:80'
    command: ["serve", "--env", "${ENV}", "--hostname", "0.0.0.0", "--port", "80"]
    deploy:
      mode: global
      update_config:
        order: start-first
    networks:
      - backend


  reconcile:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
      "trap : TERM INT; while true; do ./Run reconcile --env ${ENV}; sleep ${RECONCILE_SLEEP:-120}; done"
    ]
    deploy:
      resources:
        limits:
          memory: 4GB
      restart_policy:
        max_attempts: 5
    networks:
      - backend


  ingest:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
      "trap : TERM INT; while true; do ./Run ingest --env ${ENV} --limit ${INGEST_LIMIT:-100}; sleep ${INGEST_SLEEP:-280}; done"
    ]
    deploy:
      resources:
        limits:
          memory: 4GB
      restart_policy:
        max_attempts: 5
    networks:
      - backend


  analyze:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
      "trap : TERM INT; while true; do ./Run analyze --env ${ENV} --limit ${ANALYZE_LIMIT:-5}; sleep ${ANALYZE_SLEEP:-10}; done"
    ]
    deploy:
      resources:
        limits:
          memory: 4GB
      restart_policy:
        max_attempts: 5
    networks:
      - backend


  trigger_builds:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
      "trap : TERM INT; while true; do ./Run trigger-builds --env ${ENV} --limit ${BUILD_TRIGGER_LIMIT:-1}; sleep ${BUILD_TRIGGER_SLEEP:-60}; done"
    ]
    deploy:
      resources:
        limits:
          memory: 4GB
      restart_policy:
        max_attempts: 5
    networks:
      - backend

  alerting:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    depends_on:
      - migrate
    entrypoint: ["/bin/bash"]
    command: ["-c", "--",
        "trap : TERM INT; while true; do ./Run alerting --env ${ENV} --time-period ${ALERTING_TIME_PERIOD:-4} --limit ${ALERTING_LIMIT:-2000}; sleep ${ALERTING_SLEEP:-300}; done"
    ]
    deploy:
      resources:
        limits:
          memory: 0.5GB
      restart_policy:
          max_attempts: 5
    networks:
      - backend

  redis:
    # Eventually we'll probably want to use redis/redis-stack-server:7.4.0-v1 here,
    # which excludes the RedisInsight GUI front-end.
    image: redis/redis-stack:7.4.0-v1
    environment:
      REDIS_ARGS: '--maxmemory 4GB --maxmemory-policy allkeys-lru'
    ports:
      - '6379:6379'
      - '8001:8001'
    deploy:
      resources:
        limits:
          memory: 4.2GB
    networks:
      - backend

  migrate:
    image: registry.gitlab.com/finestructure/swiftpackageindex:${VERSION}
    <<: *shared
    command: ["migrate", "--yes"]
    deploy:
      restart_policy:
        condition: none
    networks:
      - backend


volumes:
  checkouts:


networks:
  backend: {}
